{"ast":null,"code":"import _classCallCheck from \"/Users/jared/workspace/github/jaredpalmer/react-suspense/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jared/workspace/github/jaredpalmer/react-suspense/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jared/workspace/github/jaredpalmer/react-suspense/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jared/workspace/github/jaredpalmer/react-suspense/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jared/workspace/github/jaredpalmer/react-suspense/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jared/workspace/github/jaredpalmer/react-suspense/src/codeSplitComponent.js\";\nimport React from 'react';\nexport function codeSplitComponent(getComponent, Fallback) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(LazyComponent, _React$Component);\n\n    function LazyComponent() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, LazyComponent);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LazyComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        Component: LazyComponent.Component\n      };\n      return _this;\n    }\n\n    _createClass(LazyComponent, [{\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        var _this2 = this;\n\n        if (!this.state.Component) {\n          getComponent().then(function (Component) {\n            LazyComponent.Component = Component;\n\n            _this2.setState({\n              Component: Component\n            });\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var Component = this.state.Component;\n\n        if (Component) {\n          return React.createElement(Component, Object.assign({}, this.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20\n            },\n            __self: this\n          }));\n        }\n\n        return Fallback ? React.createElement(Fallback, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }) : null;\n      }\n    }]);\n\n    return LazyComponent;\n  }(React.Component), _class.Component = null, _temp;\n}","map":{"version":3,"sources":["/Users/jared/workspace/github/jaredpalmer/react-suspense/src/codeSplitComponent.js"],"names":["React","codeSplitComponent","getComponent","Fallback","state","Component","LazyComponent","then","setState","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,QAA1C,EAAoD;AAAA;;AACzD;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAEEC,KAFF,GAEU;AAAEC,QAAAA,SAAS,EAAEC,aAAa,CAACD;AAA3B,OAFV;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAIuB;AAAA;;AACnB,YAAI,CAAC,KAAKD,KAAL,CAAWC,SAAhB,EAA2B;AACzBH,UAAAA,YAAY,GAAGK,IAAf,CAAoB,UAAAF,SAAS,EAAI;AAC/BC,YAAAA,aAAa,CAACD,SAAd,GAA0BA,SAA1B;;AACA,YAAA,MAAI,CAACG,QAAL,CAAc;AAAEH,cAAAA,SAAS,EAATA;AAAF,aAAd;AACD,WAHD;AAID;AACF;AAXH;AAAA;AAAA,+BAaW;AAAA,YACCA,SADD,GACe,KAAKD,KADpB,CACCC,SADD;;AAEP,YAAIA,SAAJ,EAAe;AACb,iBAAO,oBAAC,SAAD,oBAAe,KAAKI,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,eAAON,QAAQ,GAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAH,GAAkB,IAAjC;AACD;AAnBH;;AAAA;AAAA,IAAmCH,KAAK,CAACK,SAAzC,UACSA,SADT,GACqB,IADrB;AAqBD","sourcesContent":["import React from 'react';\n\nexport function codeSplitComponent(getComponent, Fallback) {\n  return class LazyComponent extends React.Component {\n    static Component = null;\n    state = { Component: LazyComponent.Component };\n\n    componentWillMount() {\n      if (!this.state.Component) {\n        getComponent().then(Component => {\n          LazyComponent.Component = Component;\n          this.setState({ Component });\n        });\n      }\n    }\n\n    render() {\n      const { Component } = this.state;\n      if (Component) {\n        return <Component {...this.props} />;\n      }\n      return Fallback ? <Fallback /> : null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}