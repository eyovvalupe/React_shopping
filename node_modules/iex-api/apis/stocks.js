"use strict";
/* tslint:disable:no-magic-numbers */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaXMvc3RvY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby1tYWdpYy1udW1iZXJzICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgUXVvdGVSZXNwb25zZSB7XG4gIHN5bWJvbDogc3RyaW5nXG4gIGNvbXBhbnlOYW1lOiBzdHJpbmdcbiAgcHJpbWFyeUV4Y2hhbmdlOiBzdHJpbmdcbiAgc2VjdG9yOiBzdHJpbmdcbiAgY2FsY3VsYXRpb25QcmljZTogJ3RvcHMnIHwgJ3NpcCcgfCAncHJldmlvdXNDbG9zZScgfCAnY2xvc2UnXG4gIG9wZW46IG51bWJlclxuICBvcGVuVGltZTogbnVtYmVyXG4gIGNsb3NlOiBudW1iZXJcbiAgY2xvc2VUaW1lOiBudW1iZXJcbiAgbGF0ZXN0UHJpY2U6IG51bWJlclxuICBsYXRlc3RTb3VyY2U6ICdJRVggcmVhbCB0aW1lIHByaWNlJyB8ICcxNSBtaW51dGUgZGVsYXllZCBwcmljZScgfCAnQ2xvc2UnIHwgJ1ByZXZpb3VzIGNsb3NlJ1xuICBsYXRlc3RUaW1lOiBzdHJpbmdcbiAgbGF0ZXN0VXBkYXRlOiBudW1iZXJcbiAgbGF0ZXN0Vm9sdW1lOiBudW1iZXJcbiAgaWV4UmVhbHRpbWVQcmljZTogbnVtYmVyXG4gIGlleFJlYWx0aW1lU2l6ZTogbnVtYmVyXG4gIGlleExhc3RVcGRhdGVkOiBudW1iZXJcbiAgZGVsYXllZFByaWNlOiBudW1iZXJcbiAgZGVsYXllZFByaWNlVGltZTogbnVtYmVyXG4gIHByZXZpb3VzQ2xvc2U6IG51bWJlclxuICBjaGFuZ2U6IG51bWJlclxuICBjaGFuZ2VQZXJjZW50OiBudW1iZXJcbiAgaWV4TWFya2V0UGVyY2VudDogbnVtYmVyXG4gIGlleFZvbHVtZTogbnVtYmVyXG4gIGF2Z1RvdGFsVm9sdW1lOiBudW1iZXJcbiAgaWV4QmlkUHJpY2U6IG51bWJlclxuICBpZXhCaWRTaXplOiBudW1iZXJcbiAgaWV4QXNrUHJpY2U6IG51bWJlclxuICBpZXhBc2tTaXplOiBudW1iZXJcbiAgbWFya2V0Q2FwOiBudW1iZXJcbiAgcGVSYXRpbzogbnVtYmVyIHwgbnVsbFxuICB3ZWVrNTJIaWdoOiBudW1iZXJcbiAgd2VlazUyTG93OiBudW1iZXJcbiAgeXRkQ2hhbmdlOiBudW1iZXJcbn1cblxuLyoqXG4gKiBVbmZvcnR1bmF0ZWx5LCBwYXR0ZXJuIGJhc2VkIHR5cGUgZGVmaW5pdGlvbnMgYXJlbid0IHN1cHBvcnRlZCBpbiBUeXBlU2NyaXB0LlxuICogVGhlcmUncyBubyB3YXkgdG8gZXhwcmVzcyAnZGF0ZS88WVlZWU1NREQ+JyBhcyBhIHR5cGUgb3V0c2lkZSBvZiBhIGdlbmVyaWNcbiAqIGNhdGNoLWFsbCBzdHJpbmcuXG4gKi9cbmV4cG9ydCB0eXBlIENoYXJ0UmFuZ2VPcHRpb24gPSAnNXknIHwgJzJ5JyB8ICcxeScgfCAneXRkJyB8ICc2bScgfCAnM20nIHwgJzFtJyB8ICcxZCcgfCAnZHluYW1pYycgfCBzdHJpbmdcblxuZXhwb3J0IGludGVyZmFjZSBDaGFydEl0ZW0ge1xuICBoaWdoOiBudW1iZXJcbiAgbG93OiBudW1iZXJcbiAgdm9sdW1lOiBudW1iZXJcbiAgbGFiZWw6IG51bWJlclxuICBjaGFuZ2VPdmVyVGltZTogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT25lRGF5Q2hhcnRJdGVtIGV4dGVuZHMgQ2hhcnRJdGVtIHtcbiAgbWludXRlOiBzdHJpbmdcbiAgYXZlcmFnZTogbnVtYmVyXG4gIG5vdGlvbmFsOiBudW1iZXJcbiAgbnVtYmVyT2ZUcmFkZXM6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE11bHRpRGF5Q2hhcnRJdGVtIGV4dGVuZHMgQ2hhcnRJdGVtIHtcbiAgZGF0ZTogc3RyaW5nXG4gIG9wZW46IG51bWJlclxuICBjbG9zZTogbnVtYmVyXG4gIHVuYWRqdXN0ZWRWb2x1bWU6IG51bWJlclxuICBjaGFuZ2U6IG51bWJlclxuICBjaGFuZ2VQZXJjZW50OiBudW1iZXJcbiAgdndhcDogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIENoYXJ0UmVzcG9uc2UgPSBPbmVEYXlDaGFydEl0ZW1bXSB8IE11bHRpRGF5Q2hhcnRJdGVtW11cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQ2xvc2VSZXNwb25zZSB7XG4gIG9wZW46IHtcbiAgICBwcmljZTogbnVtYmVyXG4gICAgdGltZTogbnVtYmVyXG4gIH1cbiAgY2xvc2U6IHtcbiAgICBwcmljZTogbnVtYmVyXG4gICAgdGltZTogbnVtYmVyXG4gIH1cbn1cblxuLyoqXG4gKiBSZWZlcnMgdG8gdGhlIGNvbW1vbiBpc3N1ZSB0eXBlIG9mIHRoZSBzdG9jay5cbiAqXG4gKiBhZCDigJMgQW1lcmljYW4gRGVwb3NpdG9yeSBSZWNlaXB0IChBRFLigJlzKVxuICogcmUg4oCTIFJlYWwgRXN0YXRlIEludmVzdG1lbnQgVHJ1c3QgKFJFSVTigJlzKVxuICogY2Ug4oCTIENsb3NlZCBlbmQgZnVuZCAoU3RvY2sgYW5kIEJvbmQgRnVuZClcbiAqIHNpIOKAkyBTZWNvbmRhcnkgSXNzdWVcbiAqIGxwIOKAkyBMaW1pdGVkIFBhcnRuZXJzaGlwc1xuICogY3Mg4oCTIENvbW1vbiBTdG9ja1xuICogZXQg4oCTIEV4Y2hhbmdlIFRyYWRlZCBGdW5kIChFVEYpXG4gKiAoYmxhbmspID0gTm90IEF2YWlsYWJsZSwgaS5lLiwgV2FycmFudCwgTm90ZSwgb3IgKG5vbi1maWxpbmcpIENsb3NlZCBFbmRlZCBGdW5kc1xuICovXG5leHBvcnQgdHlwZSBJc3N1ZVR5cGUgPSAnYWQnIHwgJ3JlJyB8ICdjZScgfCAnc2knIHwgJ2xwJyB8ICdjcycgfCAnZXQnIHwgJydcblxuZXhwb3J0IGludGVyZmFjZSBDb21wYW55UmVzcG9uc2Uge1xuICBzeW1ib2w6IHN0cmluZ1xuICBjb21wYW55TmFtZTogc3RyaW5nXG4gIGV4Y2hhbmdlOiBzdHJpbmdcbiAgaW5kdXN0cnk6IHN0cmluZ1xuICB3ZWJzaXRlOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBDRU86IHN0cmluZ1xuICBpc3N1ZVR5cGU6IElzc3VlVHlwZVxuICBzZWN0b3I6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbGV2YW50UmVzcG9uc2Uge1xuICBwZWVyczogYm9vbGVhblxuICBzeW1ib2xzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFuY2lhbCB7XG4gIHJlcG9ydERhdGU6IHN0cmluZyB8IG51bGxcbiAgZ3Jvc3NQcm9maXQ6IG51bWJlciB8IG51bGxcbiAgY29zdE9mUmV2ZW51ZTogbnVtYmVyIHwgbnVsbFxuICBvcGVyYXRpbmdSZXZlbnVlOiBudW1iZXIgfCBudWxsXG4gIHRvdGFsUmV2ZW51ZTogbnVtYmVyIHwgbnVsbFxuICBvcGVyYXRpbmdJbmNvbWU6IG51bWJlciB8IG51bGxcbiAgbmV0SW5jb21lOiBudW1iZXIgfCBudWxsXG4gIHJlc2VhcmNoQW5kRGV2ZWxvcG1lbnQ6IG51bWJlciB8IG51bGxcbiAgb3BlcmF0aW5nRXhwZW5zZTogbnVtYmVyIHwgbnVsbFxuICBjdXJyZW50QXNzZXRzOiBudW1iZXIgfCBudWxsXG4gIHRvdGFsQXNzZXRzOiBudW1iZXIgfCBudWxsXG4gIHRvdGFsTGlhYmlsaXRpZXM6IG51bWJlciB8IG51bGxcbiAgY3VycmVudENhc2g6IG51bWJlciB8IG51bGxcbiAgY3VycmVudERlYnQ6IG51bWJlciB8IG51bGxcbiAgdG90YWxDYXNoOiBudW1iZXIgfCBudWxsXG4gIHRvdGFsRGVidDogbnVtYmVyIHwgbnVsbFxuICBzaGFyZWhvbGRlckVxdWl0eTogbnVtYmVyIHwgbnVsbFxuICBjYXNoQ2hhbmdlOiBudW1iZXIgfCBudWxsXG4gIGNhc2hGbG93OiBudW1iZXIgfCBudWxsXG4gIG9wZXJhdGluZ0dhaW5zTG9zc2VzOiBudW1iZXIgfCBudWxsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYW5jaWFsc1Jlc3BvbnNlIHtcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZmluYW5jaWFsczogRmluYW5jaWFsW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZXdzIHtcbiAgZGF0ZXRpbWU6IHN0cmluZ1xuICBoZWFkbGluZTogc3RyaW5nXG4gIHNvdXJjZTogc3RyaW5nXG4gIHVybDogc3RyaW5nXG4gIHN1bW1hcnk6IHN0cmluZ1xuICByZWxhdGVkOiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgTmV3c1JhbmdlID0gMSB8IDIgfCAzIHwgNCB8IDUgfCA2IHwgNyB8IDggfCA5IHwgMTAgfCAxMSB8IDEyIHxcbiAgMTMgfCAxNCB8IDE1IHwgMTYgfCAxNyB8IDE4IHwgMTkgfCAyMCB8IDIxIHwgMjIgfCAyMyB8IDI0IHwgMjUgfCAyNiB8IDI3IHxcbiAgMjggfCAyOSB8IDMwIHwgMzEgfCAzMiB8IDMzIHwgMzQgfCAzNSB8IDM2IHwgMzcgfCAzOCB8IDM5IHwgNDAgfCA0MSB8IDQyIHxcbiAgNDMgfCA0NCB8IDQ1IHwgNDYgfCA0NyB8IDQ4IHwgNDkgfCA1MFxuXG5leHBvcnQgdHlwZSBTcGxpdFJhbmdlID0gJzV5JyB8ICcyeScgfCAnMXknIHwgJ3l0ZCcgfCAnNm0nIHwgJzNtJyB8ICcxbSdcblxuZXhwb3J0IGludGVyZmFjZSBTcGxpdCB7XG5leERhdGU6IHN0cmluZ1xuZGVjbGFyZWREYXRlOiBzdHJpbmdcbnJlY29yZERhdGU6IHN0cmluZ1xucGF5bWVudERhdGU6IHN0cmluZ1xucmF0aW86IG51bWJlclxudG9GYWN0b3I6IG51bWJlciAvLyBUT0RPOiBBUEkgZG9jcyBzYXkgc3RyaW5nLCBidXQgdGhpcyBsb29rcyB0byBhY3R1YWxseSBiZSBhIG51bWJlclxuZm9yRmFjdG9yOiBudW1iZXIgLy8gVE9ETzogQVBJIGRvY3Mgc2F5IHN0cmluZywgYnV0IHRoaXMgbG9va3MgdG8gYWN0dWFsbHkgYmUgYSBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dvUmVzcG9uc2Uge1xuICB1cmw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtleVN0YXRzUmVzcG9uc2Uge1xuICBjb21wYW55TmFtZTogc3RyaW5nXG4gIG1hcmtldENhcDogbnVtYmVyXG4gIGJldGE6IG51bWJlclxuICB3ZWVrNTJoaWdoOiBudW1iZXJcbiAgd2VlazUybG93OiBudW1iZXJcbiAgd2VlazUyY2hhbmdlOiBudW1iZXJcbiAgc2hvcnRJbnRlcmVzdDogbnVtYmVyXG4gIHNob3J0RGF0ZTogc3RyaW5nXG4gIGRpdmlkZW5kUmF0ZTogbnVtYmVyXG4gIGRpdmlkZW5kWWllbGQ6IG51bWJlclxuICBleERpdmlkZW5kRGF0ZTogc3RyaW5nXG4gIGxhdGVzdEVQUzogbnVtYmVyXG4gIGxhdGVzdEVQU0RhdGU6IHN0cmluZ1xuICBzaGFyZXNPdXRzdGFuZGluZzogbnVtYmVyXG4gIGZsb2F0OiBudW1iZXJcbiAgcmV0dXJuT25FcXVpdHk6IG51bWJlclxuICBjb25zZW5zdXNFUFM6IG51bWJlclxuICBudW1iZXJPZkVzdGltYXRlczogbnVtYmVyXG4gIHN5bWJvbDogc3RyaW5nXG4gIEVCSVREQTogbnVtYmVyXG4gIHJldmVudWU6IG51bWJlclxuICBncm9zc1Byb2ZpdDogbnVtYmVyXG4gIGNhc2g6IG51bWJlclxuICBkZWJ0OiBudW1iZXJcbiAgdHRtRVBTOiBudW1iZXJcbiAgcmV2ZW51ZVBlclNoYXJlOiBudW1iZXJcbiAgcmV2ZW51ZVBlckVtcGxveWVlOiBudW1iZXJcbiAgcGVSYXRpb0hpZ2g6IG51bWJlclxuICBwZVJhdGlvTG93OiBudW1iZXJcbiAgRVBTU3VycHJpc2VEb2xsYXI6IG51bWJlclxuICBFUFNTdXJwcmlzZVBlcmNlbnQ6IG51bWJlclxuICByZXR1cm5PbkFzc2V0czogbnVtYmVyXG4gIHJldHVybk9uQ2FwaXRhbDogbnVtYmVyXG4gIHByb2ZpdE1hcmdpbjogbnVtYmVyXG4gIHByaWNlVG9TYWxlczogbnVtYmVyXG4gIHByaWNlVG9Cb29rOiBudW1iZXJcbiAgZGF5MjAwTW92aW5nQXZnOiBudW1iZXJcbiAgZGF5NTBNb3ZpbmdBdmc6IG51bWJlclxuICBpbnN0aXR1dGlvblBlcmNlbnQ6IG51bWJlclxuICBpbnNpZGVyUGVyY2VudDogbnVtYmVyXG4gIHNob3J0UmF0aW86IG51bWJlclxuICB5ZWFyNUNoYW5nZVBlcmNlbnQ6IG51bWJlclxuICB5ZWFyMkNoYW5nZVBlcmNlbnQ6IG51bWJlclxuICB5ZWFyMUNoYW5nZVBlcmNlbnQ6IG51bWJlclxuICB5dGRDaGFuZ2VQZXJjZW50OiBudW1iZXJcbiAgbW9udGg2Q2hhbmdlUGVyY2VudDogbnVtYmVyXG4gIG1vbnRoM0NoYW5nZVBlcmNlbnQ6IG51bWJlclxuICBtb250aDFDaGFuZ2VQZXJjZW50OiBudW1iZXJcbiAgZGF5NUNoYW5nZVBlcmNlbnQ6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpb3VzIHtcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZGF0ZTogc3RyaW5nXG4gIG9wZW46IG51bWJlclxuICBoaWdoOiBudW1iZXJcbiAgbG93OiBudW1iZXJcbiAgY2xvc2U6IG51bWJlclxuICB2b2x1bWU6IG51bWJlclxuICB1bmFkanVzdGVkVm9sdW1lOiBudW1iZXJcbiAgY2hhbmdlOiBudW1iZXJcbiAgY2hhbmdlUGVyY2VudDogbnVtYmVyXG4gIHZ3YXA6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpb3VzTWFya2V0IHtcbiAgW3N5bWJvbDogc3RyaW5nXTogUHJldmlvdXNcbn1cblxuZXhwb3J0IHR5cGUgUHJldmlvdXNSZXNwb25zZSA9IFByZXZpb3VzIHwgUHJldmlvdXNNYXJrZXRcblxuZXhwb3J0IGludGVyZmFjZSBFYXJuaW5nIHtcbiAgYWN0dWFsRVBTOiBudW1iZXJcbiAgY29uc2Vuc3VzRVBTOiBudW1iZXJcbiAgZXN0aW1hdGVkRVBTOiBudW1iZXJcbiAgYW5ub3VuY2VUaW1lOiBzdHJpbmcgLy8gVE9ETzogQVBJIGRvY3MgZG9uJ3QgbWVudGlvbiB0aGlzLCBidXQgdGhpcyBjYW4gcHJvYmFibHkgYmUgYW4gZW51bVxuICBudW1iZXJPZkVzdGltYXRlczogbnVtYmVyXG4gIEVQU1N1cnByaXNlRG9sbGFyOiBudW1iZXJcbiAgRVBTUmVwb3J0RGF0ZTogc3RyaW5nXG4gIGZpc2NhbFBlcmlvZDogc3RyaW5nXG4gIGZpc2NhbEVuZERhdGU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVhcm5pbmdzUmVzcG9uc2Uge1xuICBzeW1ib2w6IHN0cmluZ1xuICBlYXJuaW5nczogRWFybmluZ1tdXG59XG5cbmV4cG9ydCB0eXBlIERpdmlkZW5kUmFuZ2UgPSAnNXknIHwgJzJ5JyB8ICcxeScgfCAneXRkJyB8ICc2bScgfCAnM20nIHwgJzFtJ1xuXG5leHBvcnQgaW50ZXJmYWNlIERpdmlkZW5kIHtcbiAgZXhEYXRlOiBzdHJpbmdcbiAgcGF5bWVudERhdGU6IHN0cmluZ1xuICByZWNvcmREYXRlOiBzdHJpbmdcbiAgZGVjbGFyZWREYXRlOiBzdHJpbmdcbiAgYW1vdW50OiBudW1iZXJcbiAgZmxhZzogc3RyaW5nIC8vIFRPRE86IEFQSSBkb2NzIGRvbid0IG1lbnRpb24gdGhpcywgYnV0IHRoaXMgY2FuIHByb2JhYmx5IGJlIGFuIGVudW1cbiAgdHlwZTogJ0RpdmlkZW5kIGluY29tZScgfCAnSW50ZXJlc3QgaW5jb21lJyB8ICdTdG9jayBkaXZpZGVuZCcgfFxuICAgICAgICAnU2hvcnQgdGVybSBjYXBpdGFsIGdhaW4nIHwgJ01lZGl1bSB0ZXJtIGNhcGl0YWwgZ2FpbicgfFxuICAgICAgICAnTG9uZyB0ZXJtIGNhcGl0YWwgZ2FpbicgfCAnVW5zcGVjaWZpZWQgdGVybSBjYXBpdGFsIGdhaW4nXG4gIHF1YWxpZmllZDogJ1AnIHwgJ1EnIHwgJ04nIHwgJycgfCBudWxsIC8vIFRPRE86IEFQSSBEb2NzIHNheSBudWxsIGhlcmUsIGJ1dCB3ZSBuZWVkIHRvIGNvbmZpcm0gaWYgdGhhdCBldmVyIGhhcHBlbnNcbiAgaW5kaWNhdGVkOiBzdHJpbmcgLy8gVE9ETzogQVBJIGRvY3MgZG9uJ3QgbWVudGlvbiB0aGlzLCBidXQgdGhpcyBjYW4gcHJvYmFibHkgYmUgYW4gZW51bVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGF5ZWRRdW90ZVJlc3BvbnNlIHtcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZGVsYXllZFByaWNlOiBudW1iZXJcbiAgaGlnaDogbnVtYmVyXG4gIGxvdzogbnVtYmVyXG4gIGRlbGF5ZWRTaXplOiBudW1iZXJcbiAgZGVsYXllZFByaWNlVGltZTogbnVtYmVyXG4gIHByb2Nlc3NlZFRpbWU6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBNYXJrZXRMaXN0ID0gJ21vc3RhY3RpdmUnIHwgJ2dhaW5lcnMnIHwgJ2xvc2VycycgfCAnaWV4dm9sdW1lJyB8ICdpZXhwZXJjZW50J1xuXG5leHBvcnQgaW50ZXJmYWNlIEVmZmVjdGl2ZVNwcmVhZCB7XG4gIHZvbHVtZTogbnVtYmVyIC8vIFRPRE86IEFQSSBkb2NzIHNheSB0aGlzIGlzIGEgc3RyaW5nLCBidXQgaXQgbG9va3MgbGlrZSBpdCdzIGEgbnVtYmVyXG4gIHZlbnVlOiBzdHJpbmdcbiAgdmVudWVOYW1lOiBzdHJpbmdcbiAgZWZmZWN0aXZlU3ByZWFkOiBudW1iZXJcbiAgZWZmZWN0aXZlUXVvdGVkOiBudW1iZXJcbiAgcHJpY2VJbXByb3ZlbWVudDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm9sdW1lQnlWZW51ZSB7XG52b2x1bWU6IG51bWJlclxudmVudWU6IHN0cmluZ1xudmVudWVOYW1lOiBzdHJpbmdcbmRhdGU6IHN0cmluZyB8IG51bGxcbm1hcmtldFBlcmNlbnQ6IG51bWJlclxuYXZnTWFya2V0UGVyY2VudDogbnVtYmVyXG59XG4iXX0=